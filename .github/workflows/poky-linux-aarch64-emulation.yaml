# Emulate Full Poky Linux AARCH64 Environment (Headless)
#
# This GitHub Actions workflow emulates a full Poky Linux AARCH64 environment using QEMU in headless mode.
# It builds a specified Poky Linux image and runs it in the emulator.
#
# Common targets are:
#   - core-image-minimal
#   - core-image-full-cmdline
#   - core-image-sato
#   - core-image-weston
#   - meta-toolchain
#   - meta-ide-support

name: Emulate Full Poky Linux AARCH64 Environment (Headless)

on:
  push:
    branches:
      - main  # Change this to your preferred branch

jobs:
  emulate:
    runs-on: ubuntu-latest  # Use the latest version of Ubuntu

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Required Build Tools
      run: |
        sudo apt-get update
        sudo apt-get install -y chrpath diffstat

    - name: Set up QEMU for ARM64
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-system-aarch64

    - name: Clone Poky Linux repository
      run: git clone https://git.yoctoproject.org/git/poky.git
      
    - name: Build Full Poky Linux AARCH64 Image
      run: |
        cd poky
        source oe-init-build-env
        bitbake core-image-full-cmdline  # Adjust the image name to a full image like core-image-full-cmdline
      shell: bash

    - name: Run Full Poky Linux AARCH64 Emulator (Headless)
      run: |
        qemu-system-aarch64 -machine virt -cpu cortex-a53 -m 2048 -smp 2 -kernel tmp/deploy/images/qemuarm64/Image -append "root=/dev/vda rw console=ttyAMA0" -drive file=tmp/deploy/images/qemuarm64/core-image-full-cmdline-qemuarm64.ext4,if=none,id=drive0 -device virtio-blk-device,drive=drive0 -nographic

    - name: Install GCC and G++ on Emulated Full Poky Linux AARCH64
      run: |
        opkg update  # Update the package list
        opkg install gcc g++

    - name: Install Clang and LLVM Tools
      run: |
        opkg install clang llvm
