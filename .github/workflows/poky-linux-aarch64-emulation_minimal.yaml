# Emulate Minimal Poky Linux AARCH64 Environment (Headless) with Cleanup
#
# This GitHub Actions workflow emulates a minimal Poky Linux AARCH64 environment using QEMU in headless mode.
# It cleans up temporary build files for specified image recipes that exist, builds a minimal Poky Linux image, and runs it in the emulator.
#
# Common targets are:
#   - core-image-minimal
#   - core-image-full-cmdline
#   - core-image-sato
#   - core-image-weston
#   - meta-toolchain
#   - meta-ide-support

name: Emulate Minimal Poky Linux AARCH64 Environment (Headless) with Cleanup

on:
  push:
    branches:
      - main  # Change this to your preferred branch

jobs:
  emulate:
    runs-on: ubuntu-latest  # Use the latest version of Ubuntu

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Clean Up Temporary Build Files
      run: |
        # List of image recipes to clean up
        image_recipes=("core-image-minimal" "core-image-full-cmdline" "core-image-sato" "core-image-weston" "meta-toolchain" "meta-ide-support")

        for image_recipe in "${image_recipes[@]}"; do
          # Check if the image recipe exists before cleaning up
          if [ -e "build/conf/auto.conf" ]; then
            if grep -q "^IMAGE_INSTALL_append = .*$image_recipe.*" "build/conf/auto.conf"; then
              bitbake -c cleanall $image_recipe
            fi
          fi
        done
      shell: bash

    - name: Install Required Build Tools
      run: |
        sudo apt-get update
        sudo apt-get install -y chrpath diffstat

    - name: Set up QEMU for ARM64
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-system-aarch64

    - name: Clone Poky Linux repository
      run: git clone https://git.yoctoproject.org/git/poky.git
      
    - name: Build Minimal Poky Linux AARCH64 Image
      run: |
        cd poky
        source oe-init-build-env
        bitbake core-image-minimal  # Build the minimal image
      shell: bash

    - name: Run Minimal Poky Linux AARCH64 Emulator (Headless)
      run: |
        qemu-system-aarch64 -machine virt -cpu cortex-a53 -m 2048 -smp 2 -kernel tmp/deploy/images/qemuarm64/Image -append "root=/dev/vda rw console=ttyAMA0" -drive file=tmp/deploy/images/qemuarm64/core-image-minimal-qemuarm64.ext4,if=none,id=drive0 -device virtio-blk-device,drive=drive0 -nographic

    - name: Install Development Tools
      run: |
        opkg update  # Update the package list
        opkg install gcc g++ clang llvm-dev
